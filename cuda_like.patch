diff --git a/.gitignore b/.gitignore
index c4ed31eb..0538befb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,5 @@ bin/hipify-clang
 include/hip/hcc_detail/hip_prof_str.h
 tags
 samples/1_Utils/hipInfo/hipInfo
+install
+.vscode
diff --git a/include/hip/hcc_detail/hip_vector_types.h b/include/hip/hcc_detail/hip_vector_types.h
index 582a359f..61bf5f05 100644
--- a/include/hip/hcc_detail/hip_vector_types.h
+++ b/include/hip/hcc_detail/hip_vector_types.h
@@ -39,7 +39,7 @@ THE SOFTWARE.
     #define __NATIVE_VECTOR__(n, ...) __attribute__((ext_vector_type(n)))
 #endif
 
-#if defined(__cplusplus) && defined(__clang__)
+#if defined(__cplusplus) && defined(__clang__) && !defined(__HIP_CUDA_LIKE_VECTORS__)
     #include <iosfwd>
     #include <type_traits>
 
diff --git a/include/hip/hcc_detail/math_fwd.h b/include/hip/hcc_detail/math_fwd.h
index c25b5e90..6affba6f 100644
--- a/include/hip/hcc_detail/math_fwd.h
+++ b/include/hip/hcc_detail/math_fwd.h
@@ -25,6 +25,9 @@ THE SOFTWARE.
 #include "host_defines.h"
 
 #if defined(__cplusplus)
+    template<typename T, unsigned int n>
+    using __HIP_Vec = T __attribute__((ext_vector_type(n)));
+
     extern "C" {
 #endif
 
@@ -32,30 +35,25 @@ THE SOFTWARE.
 #if (__hcc_workweek__ >= 19015) || __HIP_CLANG_ONLY__
 __device__
 __attribute__((const))
-int __ockl_sdot2(
-    HIP_vector_base<short, 2>::Native_vec_,
-    HIP_vector_base<short, 2>::Native_vec_,
-    int, bool);
+int __ockl_sdot2(__HIP_Vec<short, 2>, __HIP_Vec<short, 2>, int, bool);
 
 __device__
 __attribute__((const))
 unsigned int __ockl_udot2(
-    HIP_vector_base<unsigned short, 2>::Native_vec_,
-    HIP_vector_base<unsigned short, 2>::Native_vec_,
-    unsigned int, bool);
+    __HIP_Vec<unsigned short, 2>,
+    __HIP_Vec<unsigned short, 2>,
+    unsigned int,
+    bool);
 
 __device__
 __attribute__((const))
-int __ockl_sdot4(
-    HIP_vector_base<char, 4>::Native_vec_,
-    HIP_vector_base<char, 4>::Native_vec_,
-    int, bool);
+int __ockl_sdot4(__HIP_Vec<char, 4>, __HIP_Vec<char, 4>, int, bool);
 
 __device__
 __attribute__((const))
 unsigned int __ockl_udot4(
-    HIP_vector_base<unsigned char, 4>::Native_vec_,
-    HIP_vector_base<unsigned char, 4>::Native_vec_,
+    __HIP_Vec<unsigned char, 4>,
+    __HIP_Vec<unsigned char, 4>,
     unsigned int, bool);
 
 __device__
diff --git a/include/hip/hcc_detail/texture_functions.h b/include/hip/hcc_detail/texture_functions.h
index bb0a9e72..d1f36f56 100644
--- a/include/hip/hcc_detail/texture_functions.h
+++ b/include/hip/hcc_detail/texture_functions.h
@@ -22,7 +22,11 @@ THE SOFTWARE.
 
 #ifndef HIP_INCLUDE_HIP_HCC_DETAIL_TEXTURE_FUNCTIONS_H
 #define HIP_INCLUDE_HIP_HCC_DETAIL_TEXTURE_FUNCTIONS_H
+
+#define __HIP_CUDA_LIKE_VECTORS_TMP__ __HIP_CUDA_LIKE_VECTORS__
+#undef __HIP_CUDA_LIKE_VECTORS__
 #include <hip/hcc_detail/hip_vector_types.h>
+#define __HIP_CUDA_LIKE_VECTORS__ __HIP_CUDA_LIKE_VECTORS_TMP__
 #include <hip/hcc_detail/hip_texture_types.h>
 
 #pragma push_macro("TYPEDEF_VECTOR_VALUE_TYPE")
diff --git a/tests/src/hostcall/hipHostcallFuncCall.cpp b/tests/src/hostcall/hipHostcallFuncCall.cpp
index 4b73352b..27313267 100644
--- a/tests/src/hostcall/hipHostcallFuncCall.cpp
+++ b/tests/src/hostcall/hipHostcallFuncCall.cpp
@@ -27,7 +27,9 @@ THE SOFTWARE.
 
 #include <test_common.h>
 
-extern "C" __device__ HIP_vector_base<long, 2>::Native_vec_ __ockl_call_host_function(
+using Vec2 = long __attribute__((ext_vector_type(2)));
+
+extern "C" __device__ Vec2 __ockl_call_host_function(
     ulong fptr, ulong arg0, ulong arg1, ulong arg2, ulong arg3, ulong arg4, ulong arg5, ulong arg6);
 
 static void callee(ulong* output, ulong* input) {
diff --git a/tests/src/hostcall/hipHostcallPrintThings.cpp b/tests/src/hostcall/hipHostcallPrintThings.cpp
index 742798c0..a3067a29 100644
--- a/tests/src/hostcall/hipHostcallPrintThings.cpp
+++ b/tests/src/hostcall/hipHostcallPrintThings.cpp
@@ -30,7 +30,9 @@ THE SOFTWARE.
 // This is NOT a real printf test. It is a test for calling a host function
 // which happens to be a wrapper around system printf.
 
-extern "C" __device__ HIP_vector_base<long, 2>::Native_vec_ __ockl_call_host_function(
+using Vec2 = long __attribute__((ext_vector_type(2)));
+
+extern "C" __device__ Vec2 __ockl_call_host_function(
     ulong fptr, ulong arg0, ulong arg1, ulong arg2, ulong arg3, ulong arg4, ulong arg5, ulong arg6);
 
 // FuncCall service function that expects three arguments bundled in the
